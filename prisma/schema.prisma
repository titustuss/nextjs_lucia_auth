generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// User Model (Updated)
model User {
  id            String         @id
  username      String         @unique
  displayName   String
  email         String?        @unique
  passwordHash  String?
  googleId      String?        @unique
  avatarUrl     String?
  role          Role           @default(AGENT)
  sessions      Session[]
  properties    Property[] // Relationship with Property
  subscriptions Subscription[] // Relationship with Subscription
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

enum Role {
  ADMIN
  AGENT
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Property Model
model Property {
  id           String   @id @default(cuid())
  title        String
  agentId      String
  agent        User     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  mpesaTillNo  String?
  mpesaPaybill String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenants      Tenant[] // Relationship with Tenant

  @@map("properties")
}

// Subscription Model
model Subscription {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planType   PlanType
  startDate  DateTime
  endDate    DateTime
  amountPaid Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("subscriptions")
}

enum PlanType {
  BASIC
  PREMIUM
  ENTERPRISE
}

// Tenant Model (Optional: If you want to track tenants)
model Tenant {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  phone      String
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("tenants")
}
